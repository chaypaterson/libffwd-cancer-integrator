histogram.h 
	void generate_histogram(Model &ground_truth, size_t seed, size_t dataset_size,
                        const std::vector<size_t> &end_nodes,
                        real_t &max_age, size_t &reference_pop,
                        real_t &binwidth, Histogram_t &incidence)

	void save_histogram(real_t& binwidth, real_t&  max_age, size_t& reference_pop,
                    const std::vector<size_t>& end_nodes,
                    Histogram_t& incidence,
                    std::string filename)

	Epidata_t generate_dataset(Model& model, int seed, int runs)

        std::vector<size_t> convert_to_histogram(const Epidata_t& all_times,
        real_t binwidth,
        size_t node)

Something.h
	Estimate get_estimate(real_t binwidth, size_t reference_pop,
                      Histogram_t incidence,
                      Model (*method_min)(std::function<real_t(Model&)>, Model)

	void draw_level_sets(std::function<real_t(Model &model)> objective,
                     Model point, int x_axis, int y_axis,
                     real_t x_range=10.0f, real_t y_range=10.0f,
                     size_t lines=16)

	void print_model(Model &model)
        void print_best_guess(Estimate estimate)


Estimate.h

	Model instantiate_model(real_t rloh, real_t mu, real_t fitness1,
                        real_t fitness2, real_t initialpop)

guss_parameters.h

	void generate_histogram(Model &ground_truth, size_t seed, size_t dataset_size,
                        const std::vector<size_t> &end_nodes,
                        real_t &max_age, size_t &reference_pop,
                        real_t &binwidth, Histogram_t &incidence)

	void render_voxel_cube(std::function<real_t(Model &model)> objective,
                       struct BoundingBox bounding_box,
                       std::string voxel_file,
                       size_t num_child_threads)

	void draw_3dsurface(std::function<real_t(Model &model)> objective,
                    Model origin, int x_axis, int y_axis,
                    real_t x_range=10.0f, real_t y_range=10.0f,
                    size_t lines=16)

        Histogram_t jackknife_incidence(size_t index, const Histogram_t& histogram,
                                std::vector<size_t> end_nodes)

	void load_histogram(real_t& binwidth, real_t& max_age, size_t& reference_pop,
                    const std::vector<size_t>& end_nodes,
                    Histogram_t& incidence,
                    std::string filename)
	
	void resample_incidence(
    		Model (*method_min)(std::function<real_t(Model&)>, Model),
    		const Histogram_t *incidence,
    		size_t reference_pop, size_t start, size_t end, std::vector<size_t> end_nodes,
    		real_t binwidth, Model *initial_guess, std::vector<Model> *resampled_estimates)
	
	void guess_parameters(Model &ground_truth, GuesserConfig options,
                      Model (*method_min)(std::function<real_t(Model&)>, Model))

Likelihood.h

	real_t loglikelihood_hist_both(Model& params, real_t binwidth,
                               size_t ref_population,
                               Histogram_t histos) 

	real_t loglikelihood_hist_both(Model& params, real_t binwidth,
                               size_t ref_population,
                               Histogram_t histos_sporadic,
                               Histogram_t histos_germline)

	real_t loglikelihood_hist_node(Model& params, size_t node, real_t binwidth,
                               size_t ref_population,
                               const std::vector<size_t>& freqs)

	Eigen::MatrixXd compute_hessian(std::function<real_t(Model&)> objective,
                                Model point)
	
	real_t logsurvival(Model& params, int node)

guss_parameter_greliner.h
	
	Estimate get_estimate_germline(real_t binwidth, size_t reference_pop,
                               Histogram_t incidence,
                               Histogram_t incidence_germline,
                               Model (*method_min)(std::function<real_t(Model&)>, Model))

	void generate_histogram_germline(Model &ground_truth,
                        Model &ground_truth_germline,
                        size_t seed, size_t dataset_size,
                        const std::vector<size_t> &end_nodes,
                        real_t &max_age, size_t &reference_pop,
                        real_t &binwidth,
                        Histogram_t &incidence,
                        Histogram_t &incidence_germline)

	
	void guess_parameters_germline(Model &ground_truth, GuesserConfig options,
                               Model (*method_min)(std::function<real_t(Model&)>, Model))

Minimisation.h

	double uniform(double mean, double width)

	Model shifted_model(Model& params, real_t drloh, real_t dmu, real_t dfitness1,
                    real_t dfitness2, real_t dinitialpop)

	Model get_neighbour(Model& model, double w)

	double logcauchyv(double mode, double width)

	Model annealing_min(std::function<real_t(Model &model)> objective,
                    Model initial_guess)

Min.h
	Model brute_force_min(std::function<real_t(Model &model)> objective,
                      Model initial_guess)
	
	Model gradient_min(std::function<real_t(Model& model)> objective,
                   Model initial_guess)	

	Model mixed_min(std::function<real_t(Model& model)> objective,
                Model initial_guess) 

	Model mixed_min_8(std::function<real_t(Model& model)> objective,
                Model initial_guess)

	Model mixed_min_16(std::function<real_t(Model& model)> objective,
                Model initial_guess)
	
	Model skip_minimisation(std::function<real_t(Model& model)> objective,
                        Model initial_guess)




