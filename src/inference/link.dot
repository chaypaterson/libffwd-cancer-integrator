digraph function_call_graph {
    // Main function
    guessing_harness [shape=cds]; // function pointers should have a pointy shape
    config_options [label="GuesserConfig()", shape=box]; // objects should have a box shape
    main -> config_options;
    main -> instantiate_model;
    main -> guessing_harness;
    // guessing_harness is a function pointer which may take these values:
    guessing_harness -> guess_parameters [dir=none];
    guessing_harness -> guess_parameters_germline [dir=none];

    // Main does not call these but does mention them:
    method_min [shape=cds];
    //main -> method_min [dir=none];
    method_min -> skip_minimisation [dir=none];
    method_min -> mixed_min_16 [dir=none];
    method_min -> mixed_min_8 [dir=none];
    method_min -> mixed_min [dir=none];
    method_min -> gradient_min [dir=none];
    method_min -> brute_force_min [dir=none];
    method_min -> annealing_min [dir=none];

    // Cluster for guess_parameters
    subgraph cluster_guess_parameters {
        label = "Guess Parameters";
        color = lightblue;
        style = filled;

        guess_parameters -> generate_histogram;
        guess_parameters -> get_estimate;
        guess_parameters -> print_best_guess;
        guess_parameters -> render_voxel_cube;
        guess_parameters -> draw_3dsurface;
        guess_parameters -> draw_level_sets;
        guess_parameters -> jackknife_and_save;
        guess_parameters -> load_histogram;
        guess_parameters -> print_model;
        guess_parameters -> loglikelihood_hist_both_4;
    }

    // Cluster for guess_parameters_germline
    subgraph cluster_guess_parameters_germline {
        label = "Guess Parameters Germliner";
        color = lightyellow;
        style = filled;

        guess_parameters_germline -> generate_histogram_germline;
        guess_parameters_germline -> get_estimate_germline;
        guess_parameters_germline -> print_best_guess;
        guess_parameters_germline -> draw_level_sets;
        guess_parameters_germline -> print_model;
        guess_parameters_germline -> compute_hessian;
        guess_parameters_germline -> loglikelihood_hist_both_5;
    }

    // Cluster for generate_histogram
    subgraph cluster_generate_histogram {
        label = "Histogram Generation";
        color = lightgreen;
        style = filled;

        generate_histogram -> save_histogram;
        generate_histogram -> generate_dataset;
        generate_histogram -> convert_to_histogram;
    }

    // Cluster for get_estimate
    subgraph cluster_get_estimate {
        label = "Estimation Cluster";
        color = lightpink;
        style = filled;

        get_estimate -> instantiate_model;
        get_estimate -> compute_hessian;
        get_estimate -> loglikelihood_hist_both_4;
        get_estimate -> method_min;

        estimate_object [label="Estimate()", shape=box];
        get_estimate -> estimate_object;
    }

    // Cluster for annealing_min
    subgraph cluster_minimization {
        label = "Minimization Methods";
        color = lightgray;
        style = filled;

        annealing_min -> get_neighbour;
        annealing_min -> logcauchyv;
        annealing_min -> instantiate_model;
        annealing_min -> uniform;
        annealing_min -> shifted_model;
    }

    // individual connections
    loglikelihood_hist_both_4 -> loglikelihood_hist_node;
    loglikelihood_hist_both_5 -> loglikelihood_hist_node;
    loglikelihood_hist_node -> logsurvival;
    jackknife_and_save      -> resample_incidence;
    resample_incidence      -> loglikelihood_hist_both_4;
    get_estimate_germline   -> loglikelihood_hist_both_5;
    mixed_min               -> brute_force_min;
    mixed_min_8             -> brute_force_min;
    mixed_min_16            -> brute_force_min;
}

